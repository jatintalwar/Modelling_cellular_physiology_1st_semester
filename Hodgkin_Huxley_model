%%Hodgkin and huxley model for neurons. 
clear all
clc
close all

% script for simulating dynamic hodgkin & huxley model:

% these are the parameters(constants):

dt= 0.02;       % jumps in time
C_m= 1;         % capacitence per unit area ( uF/cm2)
I_e= 0;         % external current in in pA
A= 1;           % area of the membrane in cm^2
E_l= -54;       % reversal potential of leakage in mV
E_k= -77;       % reversal potential of pottasium in mV
E_na= 50;       % reversal potential for sodium in mV
g_l= 0.3;       % maximum conductance per unit area for leakage in mS/cm^2
g_k= 36;        % maximum conductance per unit area for pottasium in mS/cm^2
g_na= 120;      % maximum conductance per unit area for sodium in mS/cm^2
t_max= 20;      % defining t_max
t= 1:dt:t_max;  % time in msec

  
n_inf  =  zeros(1,length(t));  % (depends on voltage) has variable alpha and beta which further depend on voltage
alpha_n = zeros(1,length(t));  % depends only on voltage 
beta_n = zeros(1,length(t));   % depends only on voltage 
 
m_inf =  zeros(1,length(t));   % (depends on voltage) has variable alpha and beta which further depend on voltage
alpha_m = zeros(1,length(t));  % depends only on voltage 
beta_m = zeros(1,length(t));   % depends only on voltage 

h_inf =  zeros(1,length(t));   % (depends on voltage) has variable alpha and beta which further depend on voltage
alpha_h = zeros(1,length(t));  % depends only on voltage 
beta_h = zeros(1,length(t));   % depends only on voltage 

%initial conditions :
v= zeros(1,length(t));              % voltage
I_m= zeros(1,length(t));            % current I_m in pA/cm^2 
n= zeros(1,length(t));              % initializing vector n
m= zeros(1,length(t));              % initializing  vector m
h= zeros(1,length(t));              % initiaizing vector h
h(1)=1;                             % initial value of h
%n(0)=0;                            % initial value of n 
%m(0)=0;                            % initial value of m
v(1) = -75;                         % mV, and with no external input, i.e., I_e=0
    
tao_n =   zeros(1,length(t));  % time constant between peaks for pottasium ( depends on voltage) has variables alpha, beta which further depend on voltage
tao_m =   zeros(1,length(t));  % time constant between peaks for sodium ( depends on voltage) has variables alpha, beta which further depend on voltage 
tao_h =   zeros(1,length(t));  % time constant between peaks for sodium ( depends on voltage) has variables alpha, beta which further depend on voltage  
       
% My errors : 
%1. I initialized the vectors for n,m,h,tao,v after the loop
% starts so everytime a new vector was getting created. remember ****** you
% want to always initialze a vector before the loop. and define its length
% 
%2. my equation for simulation of n,m,h had tao, ninf indexes of (i-1)
%wherease it should have been (i) because in the previous equations i had
%already calculated the tao(i) n_inf(i) etc so use them & not (i-1) !!
%learn more about indexing yeah..
%3. more importantly check the units and initial conditions 

for i=2:length(t);
    
    
    % simulating for gating varibale 'n'
    
    alpha_n(i)= 0.01.*(v(i-1) + 55)/(1 - exp(-0.1.*(v(i-1) + 55)));    % first we will define the variables and later do the equation woohoo
    beta_n(i)= 0.125*exp(-0.0125.*(v(i-1) + 65));                    % rememebr indexing is very important !!
    n_inf(i)= alpha_n(i)/(alpha_n(i) + beta_n(i));
    tao_n(i)= 1/(alpha_n(i) + beta_n(i));
    %n(i)= n(i-1) + (-n(i-1) + n_inf(i-1))*dt/tao_n(i-1);          %here you index with (i-1) as you have already defined the x_inf as v(i-1) before !
    
    %simulating for gating variable 'm'
    
    alpha_m(i)= 0.1.*(v(i-1) + 40)/(1 - exp(-0.1.*(v(i-1) + 40)));     % first we will define the variables and later do the equation woohoo
    beta_m(i)= 4*exp(-0.0556.*(v(i-1) + 65));                        % rememebr indexing is very important !!
    m_inf(i)= alpha_m(i)/(alpha_m(i) + beta_m(i));
    tao_m(i)= 1/(alpha_m(i) + beta_m(i));
    %m(i)= m(i-1) + (-m(i-1) + m_inf(i-1))*1/tao_m(i-1)*dt;                     %here you index with (i-1) as you have already defined the x_inf as v(i-1) before !! 
    
    %simulating for gating variable 'h'
    
    alpha_h(i) = 0.07.*exp(-0.05.*(v(i-1) + 65));                      % first we will define the variables and later do the equation woohoo
    beta_h(i) = 1/(1 + exp(-0.1.*(v(i-1) + 35)));                        % rememebr indexing is very important !!
    h_inf(i) = alpha_h(i)/(alpha_h(i) + beta_h(i));
    tao_h(i)= 1/(alpha_h(i) + beta_h(i));
    %h(i)= h(i-1) + (-h(i-1) + h_inf(i-1))*1/tao_h(i-1)*dt;                     %here you index with (i-1) as you have already defined the x_inf as v(i-1) before !
    
    %simulating the main equation;
    n(i)= n(i-1) + (-n(i-1) + n_inf(i))*dt/tao_n(i);
    m(i)= m(i-1) + (-m(i-1) + m_inf(i))*1/tao_m(i)*dt;
    h(i)= h(i-1) + (-h(i-1) + h_inf(i))*1/tao_h(i)*dt; 
    
    I_m(i)= g_l.*(v(i-1)-E_l) + g_k*n(i)^4.*(v(i-1)- E_k) + g_na*m(i)^3*h(i).*(v(i-1)-E_na);
    v(i)= v(i-1) + (-I_m(i) + I_e/A)*dt/C_m;
    
end

figure                                 % plotting the figures; % for gating varibale n,h,m and v and I_m for no external input current i.e I_e=0
subplot(2,1,1)
plot(t, v,'magenta')
xlabel('time- msec')
ylabel('v [mV]')
title('time vs voltage')
subplot(2,1,2)
plot(t,I_m,'black')
xlabel('time in msec')
ylabel('I_m in uA/cm^2')
hold on 

figure
plot(t,m,'green', t,h,'yellow',t,n,'red')
xlabel('time-msec')
ylabel('m,n,h')
helg2=legend('m','h','n');
hold on
box off



