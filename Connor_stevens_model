
clear all
clc
close all


% script for simulating connor stevens models 
% these are the parameters(constants):

dt= 0.01;       % jumps in time
C_m= 1;         % capacitence per unit area ( uF/cm2)
A= 1;           % area of the membrane in cm^2
E_l= -70;       % reversal potential of leakage in mV
E_k= -72;       % reversal potential of pottasium in mV
E_na= 55;       % reversal potential for sodium in mV
E_a = -75;      % mv 
g_l= 0.3;       % maximum conductance per unit area for leakage in mS/cm^2
g_k= 20;        % maximum conductance per unit area for pottasium in mS/cm^2
g_a= 47.7;      % a gating variable for pottasium ms/cm^2
g_na= 120;      % maximum conductance per unit area for sodium in mS/cm^2
t_max= 80;     % defining t_max in msec
t= 0:dt:t_max;  % time in msec

  
n_inf  =  zeros(1,length(t));  % (depends on voltage) has variable alpha and beta which further depend on voltage
alpha_n = zeros(1,length(t));  % depends only on voltage 
beta_n = zeros(1,length(t));   % depends only on voltage 
 
m_inf =  zeros(1,length(t));   % (depends on voltage) has variable alpha and beta which further depend on voltage
alpha_m = zeros(1,length(t));  % depends only on voltage 
beta_m = zeros(1,length(t));   % depends only on voltage 

h_inf =  zeros(1,length(t));   % (depends on voltage) has variable alpha and beta which further depend on voltage
alpha_h = zeros(1,length(t));  % depends only on voltage 
beta_h = zeros(1,length(t));   % depends only on voltage 

% new gating variables for pottasium : 

a_inf = zeros(1,length(t));   
b_inf= zeros(1,length(t));
    

%%initial conditions :
v= zeros(1,length(t));              % voltage
I_m= zeros(1,length(t));            % current I_m in pA/cm^2 
n= zeros(1,length(t));              % initializing vector 'n' which is nothing but probability of voltage gated ion channels for pottasium
m= zeros(1,length(t));              % initializing  vector 'm' which is nothing but probability of voltage gated ion channels for sodium
h= zeros(1,length(t));              % initiaizing vector 'h' which is nothing but probability of voltage gated ion channels for sodium are open, inactive, closed .
a= zeros(1,length(t));
b= zeros(1,length(t));



a(1)= 0.5404;                       %initial value of a
b(1)= 0.2887;                       %initial value of b
h(1)=0.9659;                        % initial value of h
n(1)=0.1159;                        % initial value of n 
m(1)=0.0101;                        % initial value of m
v(1) = -68;                         % mV, and with no external input, i.e., I_e=0
tao_n =   zeros(1,length(t));       % time constant between peaks for pottasium ( depends on voltage) has variables alpha, beta which further depend on voltage
tao_m =   zeros(1,length(t));       % time constant between peaks for sodium ( depends on voltage) has variables alpha, beta which further depend on voltage 
tao_h =   zeros(1,length(t));       % time constant between peaks for sodium ( depends on voltage) has variables alpha, beta which further depend on voltage  
tao_a =   zeros(1,length(t));
tao_b =   zeros(1,length(t));
    

    for i=2:length(t);
        if t(i)> 1 && t(i)<6
            I_e= -10;
        elseif t(i) > 20 && t(i) < 25
            I_e= -10;
        elseif t(i) > 35 && t(i) < 40
            I_e= -10;
        elseif t(i) > 50 && t(i) < 56 
            I_e=-10;
        else I_e=0;
        end
    % simulating for gating varibale 'n'
    
    alpha_n(i)= 0.02.*(v(i-1) + 45.7)/(1 - exp(-0.1.*(v(i-1) + 45.7)));    % first we will define the variables and later do the equation woohoo
    beta_n(i)= 0.25*exp(-0.0125.*(v(i-1) + 55.7));                    % rememebr indexing is very important !!
    n_inf(i)= alpha_n(i)/(alpha_n(i) + beta_n(i));
    tao_n(i)= 1/(alpha_n(i) + beta_n(i));
    
    %simulating for gating variable 'm'
    
    alpha_m(i)= 0.38.*(v(i-1) + 29.7)/(1 - exp(-0.1.*(v(i-1) + 29.7)));     % first we will define the variables and later do the equation woohoo
    beta_m(i)= 15.2*exp(-0.0556.*(v(i-1) + 54.7));                        % rememebr indexing is very important !!
    m_inf(i)= alpha_m(i)/(alpha_m(i) + beta_m(i));
    tao_m(i)= 1/(alpha_m(i) + beta_m(i));
        
    %simulating for gating variable 'h'
    
    alpha_h(i) = 0.266.*exp(-0.05.*(v(i-1) + 48));                      % first we will define the variables and later do the equation woohoo
    beta_h(i) = 3.8/(1 + exp(-0.1.*(v(i-1) + 18)));                        % rememebr indexing is very important !!
    h_inf(i) = (alpha_h(i)/(alpha_h(i) + beta_h(i)));
    tao_h(i)= 1/(alpha_h(i) + beta_h(i));
    
    %simulating for gatinf variable 'a'
    
    a_inf(i) = (0.0761.*exp(0.0314.*(v(i-1) + 94.22))/1+exp(0.0346.*(v(i-1) + 1.17)))^1/3;
    tao_a(i) = 0.3632 + 1.158/(1 + exp(0.0497.*(v(i-1) + 55.96)));
    
    % dimulating for gating variable 'b'
    
    b_inf(i) = (1/(1+ exp(0.0688.*(v(i-1) + 53.3))))^4;
    tao_b(i) = 1.24 + 1.678/(1+exp(0.0624.*(v(i-1) + 50)));
    
    
    %simulating the main equation;
    
    n(i)= n(i-1) + (-n(i-1) + n_inf(i))*1/tao_n(i)*dt;
    m(i)= m(i-1) + (-m(i-1) + m_inf(i))*1/tao_m(i)*dt;
    h(i)= h(i-1) + (-h(i-1) + h_inf(i))*1/tao_h(i)*dt;
    a(i)= a(i-1) + (-a(i-1) + a_inf(i))*1/tao_a(i)*dt;
    b(i)= b(i-1) + (-b(i-1) + b_inf(i))*1/tao_b(i)*dt;
    
    I_m(i)= g_l.*(v(i-1)-E_l) + g_k*n(i)^4.*(v(i-1)- E_k) + g_na*m(i)^3*h(i).*(v(i-1)-E_na) + g_a*a(i)^3*b(i).*(v(i-1)-E_a);
    v(i)= v(i-1) + (-I_m(i) + I_e/A)*dt/C_m;
    
    
    end
    
figure
subplot(2,1,1)
plot(t,n,'green', t,m,'yellow', t,h,'red')
xlabel('time(msec)') 
ylabel('n,m,h')
title('gating variables with time')
helg2=legend('n','m','h');
subplot(2,1,2)
plot(t,a,'blue', t,b,'black')
xlabel('time(msec)') 
ylabel('a,b')
title('gating variables a,b ')
helg3=legend('a','b');
box off
hold on

figure                                 % plotting the figures; % for gating varibale n,h,m and v and I_m for no external input current i.e I_e=0
plot(t, v,'red','LineWidth',3)
xlabel('time msec')
ylabel('voltage mV')
title('connor stevens model voltage curve for rebound spike')
hleg4=legend('I_e= -10 pA');
hold on 
box off


